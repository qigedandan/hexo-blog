{"meta":{"title":"锦的blog","subtitle":"保持自己的决心","description":"锦上添花","author":"七个旦旦","url":"https://qgdd.vercel.app","root":"/"},"pages":[],"posts":[{"title":"操作系统大作业","slug":"操作系统大作业","date":"2022-05-25T02:38:03.000Z","updated":"2022-05-25T02:40:25.714Z","comments":true,"path":"2022/05/25/操作系统大作业/","link":"","permalink":"https://qgdd.vercel.app/2022/05/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%A7%E4%BD%9C%E4%B8%9A/","excerpt":"一、计算题本文转载自：KirinLee_01的博客-CSDN博客 一个文件系统中有一个20MB大文件和一个20KB小文件,当分别采用连续、链接、i-node(10个直接地址，一个一级间接、一个二级间接和一个三级间接)分配方案时，每块大小为4KB,每块地址用4B表示， 问： (1)各文件系统管理的最大的文件是多少?(2)每种方案对大、小两文件各需要多少专用块来记录文件的物理地址(说明各块的用途)?(3)如需要读大文件前面第5.5KB的信息和后面第（16M＋5.5KB）的信息，则每个方案各需要多少次盘I&#x2F;O操作?(4)根据上述情况，分析比较三种文件分配方式的优劣。","text":"一、计算题本文转载自：KirinLee_01的博客-CSDN博客 一个文件系统中有一个20MB大文件和一个20KB小文件,当分别采用连续、链接、i-node(10个直接地址，一个一级间接、一个二级间接和一个三级间接)分配方案时，每块大小为4KB,每块地址用4B表示， 问： (1)各文件系统管理的最大的文件是多少?(2)每种方案对大、小两文件各需要多少专用块来记录文件的物理地址(说明各块的用途)?(3)如需要读大文件前面第5.5KB的信息和后面第（16M＋5.5KB）的信息，则每个方案各需要多少次盘I&#x2F;O操作?(4)根据上述情况，分析比较三种文件分配方式的优劣。 答：（1）各文件系统管理的最大的文件如下： ①连续分配： 理论上是不受限制，可大到整个磁盘文件区。②链接分配： 由于块的地址为4B，所以能表示的最多块数为2^32^&#x3D;4G，而每个盘块中存放文件大小为4KB。链接分配可管理的最大文件为：4G×4KB&#x3D;16368GB。 ③i-node分配：由于盘块大小为4KB，每个地址用4B表示，一个盘块可存1K个索引表目。对于i-node(10个直接地址，一个一级间接、一个二级间接和一个三级间接)分配，即：10×4KB+ 4KB×1KB + 4KB×1KB×1KB + 4KB×1KB×1KB×1KB，因此可管理的最大文件为：4TB4GB4MB40KB。 （2）每种方案记录文件的物理地址所需的专用块数如下： ①连续分配：对大小两个文件都只需在文件控制块FCB中设二项，一是首块物理块块号，另一是文件总块数，不需专用块来记录文件的物理地址。②链接分配：对大小两个文件都只需在文件控制块FCB中设二项，一是首块物理块块号，另一是末块物理块块号；同时在文件的每个物理块中设置存放下一个块号的指针,故不需专用块来记录文件的物理地址。③i-node分配：对20KB小文件只需在文件控制块FCB的i_addr[15]中使用前5个表目存放文件的物理块号，不需专用物理块。对20MB大文件，FCB的i_addr[15]中使用前10个表目存放大文件前10块物理块块号（40K），用一级索引块1块保存大文件接着的1K块块号（4M），剩下还有不到16M，还要用二级索引存大文件以后的块号，二级索引使用第一级索引1块，第二级索引4块（因为4KB×1K×4&#x3D;16M）。总共也需要6块专用物理块来存放文件物理地址。 （3）每个方案所需的盘I&#x2F;O操作次数如下： ①连续分配：为读大文件前面和后面信息都需先计算信息在文件中相对块数，前面信息相对逻辑块号为5.5K&#x2F;4K&#x3D;1（从0开始编号），再读一次得到所需信息，共2次盘I&#x2F;O。后面信息相对逻辑块号为（16M＋5.5K）&#x2F;4K&#x3D;4097。再计算物理块号＝文件首块号＋相对逻辑块号，最后一次盘I&#x2F;O操作读出该块信息，共4098次盘I&#x2F;O。②链接分配：为读大文件前面5.5KB的信息，只需先读一次文件头块得到信息所在块的块号，再读一次第1号逻辑块得到所需信息，共2次。读大文件16MB＋5.5KB处的信息，逻辑块号为（16M＋5.5K）&#x2F;4092&#x3D;4107，要先把该信息所在块前面块顺序读出，共化4107次盘I&#x2F;O操作，才能得到信息所在块的块号，最后一次I&#x2F;O操作读出该块信息。所以总共需要4108次盘I&#x2F;O才能读取（16MB+5.5KB）处信息。③i-node分配：为读大文件前面5.5KB处信息，先根据它的相对逻辑块号，在内存文件控制块FCB的i_addr第二个表目中读取信息所在块块号，而1次盘I&#x2F;O操作即可读出该块信息。为读大文件后在（16MB＋5.5KB）信息，先根据它的相对逻辑块号判断要读的信息是在二级索引管理范围内，先根据i_addr内容进行一次盘I&#x2F;O操作读出第一级索引块，再计算信息所在块的索引块号在第一级索引块的表目号为（4097-10-1024）&#x2F;1024＝2，根据第一级索引块第3个表目内容再进行一次盘I&#x2F;O操作，读出第二级索引块，就可以得到信息所在块块号，最后一次盘I&#x2F;O读出信息所在盘块，这样总共需要3次盘I&#x2F;O操作才能读出文件后面的信息。 （4）由上可知三种文件分配方式的优劣如下： ①连续分配：该方式要求每个文件在磁盘上占有一组连续的块。因此，物理上采用连续分配，存储空间利用率低，会产生难以利用的磁盘碎片。可以用紧凑来处理磁盘碎片，但是会需要耗费很大的时间代价。优点：实现简单，顺序存取速度快，适合顺序访问和直接访问（随机访问）。缺点：分配速度慢，不方便文件拓展，存储空间利用率低，外存碎片多（类似内存的可重定位可变分区分配）。 ②链接分配：该方式解决了连续分配的所有问题。采用链接分配，每个文件是磁盘块的链表；磁盘块可能会散布在磁盘的任何地方。目录包括文件第一块和最后一块的指针。优点：采用链接分配没有外部碎片，空闲空间列表的任何块可以用于满足请求。当创建文件时，并不需要说明文件的大小只，要有可用的空闲块，文件就可以继续增长。因此，无需合并磁盘空间。缺点：它只能有效用于顺序访问文件。要找到文件的第i个块，必须从文件的开始起，跟着指针，找到第i块。每个指针的访问都需要一个磁盘读，有时需要磁盘寻道。因此，链接分配不能有效支持文件的直接访问。另一个缺点是指针所需的空间。如果指针需要使用512 字节块的 4 字节，则 0.78% 的磁盘空间会用于指针，而不是其他信息。因此，每个文件需要比原来稍多的空间，可靠性也降低，因为文件是通过散布在磁盘上的指针链接起来的，操作系统软件错误或磁盘硬件故障可能导致获得一个错误指针，这个错误可能会导致链接到空闲空间列表或链接到另一个文件。 ③i-node分配：链接分配解决了连续分配的外部碎片和大小声明的问题。然而，在没有 FAT时，链接分配不能支持髙效的直接访问，因为块指针与块一起分散在整个磁盘上，并且必须按序读取。那么索引分配（i-node）通过将所有指针放在一起，即索引块，解决了这个问题。每个文件都有自己的索引块，这是一个磁盘块地址的数组。索引块的第 i 个条目指向文件的第 i 个块。目录包含索引块的地址。当查找和读取第 i 个块时，采用第 i 个索引块条目的指针。优点：索引分配支持直接访问，并且没有外部碎片问题，因为磁盘的任何空闲块可以满足更多空间的请求。缺点：索引分配确实浪费空间。索引块指针的开销通常大于链接分配的指针开销。采用索引分配，即使只有一个或两个指针是非空的，也必须分配一个完整的索引块。然而，索引分配的性能取决于索引结构、文件大小以及所需块的位置，这显得比前两种方式不确定性高许多。 本文用于练习markdown语法,如有侵权,请联系删除。","categories":[],"tags":[{"name":"homework","slug":"homework","permalink":"https://qgdd.vercel.app/tags/homework/"}]},{"title":"图床测试","slug":"图床测试","date":"2022-05-24T09:22:30.000Z","updated":"2022-05-24T09:31:03.346Z","comments":true,"path":"2022/05/24/图床测试/","link":"","permalink":"https://qgdd.vercel.app/2022/05/24/%E5%9B%BE%E5%BA%8A%E6%B5%8B%E8%AF%95/","excerpt":"如你所见我刚刚创建了一个免费图床,它叫做我的图床,虽然不知道是否稳定,但是感觉应该很快 试着加入一个贴图 他好像上传成功了,你可以试着打开网页源代码,看看这副图片是不是来自其他网站的。","text":"如你所见我刚刚创建了一个免费图床,它叫做我的图床,虽然不知道是否稳定,但是感觉应该很快 试着加入一个贴图 他好像上传成功了,你可以试着打开网页源代码,看看这副图片是不是来自其他网站的。 ps: 上面这个tags好麻烦,想想如何去掉它。","categories":[],"tags":[]},{"title":"我的第一个博客","slug":"我的第一个博客","date":"2022-05-24T06:39:43.000Z","updated":"2022-05-24T06:41:03.822Z","comments":true,"path":"2022/05/24/我的第一个博客/","link":"","permalink":"https://qgdd.vercel.app/2022/05/24/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"欢迎来到德莱联盟","categories":[],"tags":[{"name":"test","slug":"test","permalink":"https://qgdd.vercel.app/tags/test/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-05-24T03:33:50.449Z","updated":"2022-05-24T03:33:50.449Z","comments":true,"path":"2022/05/24/hello-world/","link":"","permalink":"https://qgdd.vercel.app/2022/05/24/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"homework","slug":"homework","permalink":"https://qgdd.vercel.app/tags/homework/"},{"name":"test","slug":"test","permalink":"https://qgdd.vercel.app/tags/test/"}]}